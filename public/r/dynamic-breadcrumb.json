{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "dynamic-breadcrumb",
  "type": "registry:block",
  "title": "Dynamic Breadcrumb",
  "description": "Displays the path to the current resource using a hierarchy of links.",
  "files": [
    {
      "path": "registry/scat-ui/components/dynamic-breadcrumb.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  Breadcrumb,\r\n  BreadcrumbEllipsis,\r\n  BreadcrumbItem,\r\n  BreadcrumbLink,\r\n  BreadcrumbList,\r\n  BreadcrumbPage,\r\n  BreadcrumbSeparator,\r\n} from \"@/components/ui/breadcrumb\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { useIsMobile } from \"@/hooks/use-mobile\";\r\n\r\ntype SvgIconProps = React.HTMLAttributes<SVGElement>;\r\n\r\nconst DefaultSeparatorIcon = (props: SvgIconProps): React.JSX.Element => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    strokeWidth=\"2\"\r\n    viewBox=\"0 0 24 24\"\r\n    className=\"w-4 h-4\"\r\n    {...props}\r\n  >\r\n    <path d=\"m9 18 6-6-6-6\"></path>\r\n  </svg>\r\n);\r\n\r\ninterface DynamicBreadcrumbProps\r\n  extends React.ComponentProps<typeof Breadcrumb> {\r\n  path: string;\r\n  formatLabel?: (label: string) => string;\r\n  separatorClassName?: string;\r\n  excludeSegments?: string[];\r\n  appendSegments?: string[];\r\n  showSeparator?: boolean;\r\n  SeparatorIcon?: (props: SvgIconProps) => React.JSX.Element;\r\n  enableEllipsisOnDesktop?: boolean;\r\n}\r\n\r\n/**\r\n * Dynamic Breadcrumb Component\r\n *\r\n * @example\r\n *  Basic usage\r\n * <DynamicBreadcrumb path={pathname} />\r\n *\r\n *  With custom options\r\n * <DynamicBreadcrumb\r\n *   path={pathname}\r\n *   excludeSegments={[\"admin\"]}\r\n *   separatorClassName=\"text-gray-400\"\r\n * />\r\n */\r\nconst DynamicBreadcrumb = ({\r\n  path,\r\n  className,\r\n  formatLabel = (label) =>\r\n    label\r\n      .replace(/^\\d+[-.]?/, \"\")\r\n      .replace(/[-_]/g, \" \")\r\n      .replace(/\\b\\w/g, (char) => char.toUpperCase())\r\n      .trim(),\r\n  showSeparator = true,\r\n  excludeSegments = [],\r\n  enableEllipsisOnDesktop = true,\r\n  appendSegments = [],\r\n  SeparatorIcon = DefaultSeparatorIcon,\r\n  separatorClassName,\r\n  ...props\r\n}: DynamicBreadcrumbProps) => {\r\n  const isMobile = useIsMobile();\r\n\r\n  // Process path segments\r\n  let pathSegments = path.split(\"/\").filter(Boolean);\r\n\r\n  // Add \"Home\" as first segment if path is not root\r\n  if (pathSegments.length > 0) {\r\n    pathSegments = [\"home\", ...pathSegments];\r\n  } else {\r\n    pathSegments = [\"home\"];\r\n  }\r\n\r\n  // Exclude segments\r\n  if (excludeSegments.length > 0) {\r\n    pathSegments = pathSegments.filter(\r\n      (segment) => !excludeSegments.includes(segment)\r\n    );\r\n  }\r\n\r\n  // Append segments\r\n  if (appendSegments.length > 0) {\r\n    pathSegments = [...pathSegments, ...appendSegments];\r\n  }\r\n\r\n  const maxVisibleSegments = 3;\r\n  const shouldShowEllipsis =\r\n    pathSegments.length > maxVisibleSegments &&\r\n    (isMobile || enableEllipsisOnDesktop);\r\n\r\n  return (\r\n    <Breadcrumb className={cn(\"flex\", className)} {...props}>\r\n      <BreadcrumbList>\r\n        {pathSegments.map((segment, index) => {\r\n          const isHome = segment === \"home\";\r\n          const href = isHome\r\n            ? \"/\"\r\n            : `/${pathSegments.slice(1, index + 1).join(\"/\")}`;\r\n          const isFirstSegment = index === 0;\r\n          const isLastSegment = index === pathSegments.length - 1;\r\n\r\n          // Simplified ellipsis logic\r\n          const isEllipsisInsertionPoint = shouldShowEllipsis && index === 1;\r\n          const isLastVisibleBeforeEllipsis =\r\n            shouldShowEllipsis && index === pathSegments.length - 2;\r\n\r\n          const isSegmentVisible =\r\n            !shouldShowEllipsis ||\r\n            isFirstSegment ||\r\n            isLastSegment ||\r\n            isLastVisibleBeforeEllipsis;\r\n\r\n          const formattedSegmentLabel = isHome ? \"Home\" : formatLabel(segment);\r\n\r\n          return (\r\n            <React.Fragment key={`${segment}-${index}`}>\r\n              {/* Show ellipsis if needed */}\r\n              {isEllipsisInsertionPoint && (\r\n                <>\r\n                  <BreadcrumbItem>\r\n                    <BreadcrumbEllipsis className=\"h-4 w-4\" />\r\n                  </BreadcrumbItem>\r\n                  {showSeparator && <BreadcrumbSeparator />}\r\n                </>\r\n              )}\r\n\r\n              {/* Show actual breadcrumb item */}\r\n              {isSegmentVisible && (\r\n                <>\r\n                  <BreadcrumbItem>\r\n                    {isLastSegment ? (\r\n                      <BreadcrumbPage\r\n                        className={cn(\r\n                          \"font-medium text-foreground truncate max-w-[150px] md:max-w-none\",\r\n                          \"text-sm\"\r\n                        )}\r\n                      >\r\n                        {formattedSegmentLabel}\r\n                      </BreadcrumbPage>\r\n                    ) : (\r\n                      <BreadcrumbLink\r\n                        href={href}\r\n                        className={cn(\r\n                          \"text-muted-foreground hover:text-foreground transition-colors\",\r\n                          \"text-sm truncate max-w-[120px] md:max-w-none\"\r\n                        )}\r\n                      >\r\n                        {formattedSegmentLabel}\r\n                      </BreadcrumbLink>\r\n                    )}\r\n                  </BreadcrumbItem>\r\n\r\n                  {/* Show separator after item (except for last item) */}\r\n                  {showSeparator && !isLastSegment && (\r\n                    <BreadcrumbSeparator>\r\n                      {/* Let shadcn handle the default separator, or use custom */}\r\n                      {SeparatorIcon !== DefaultSeparatorIcon ? (\r\n                        <SeparatorIcon\r\n                          className={cn(\"w-4 h-4\", separatorClassName)}\r\n                        />\r\n                      ) : undefined}\r\n                    </BreadcrumbSeparator>\r\n                  )}\r\n                </>\r\n              )}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </BreadcrumbList>\r\n    </Breadcrumb>\r\n  );\r\n};\r\n\r\nexport { DynamicBreadcrumb };\r\n",
      "type": "registry:block"
    }
  ]
}